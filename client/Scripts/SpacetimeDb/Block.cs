// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;
using SpacetimeDB;
using System.Collections.Generic;

namespace StdbCraft.Scripts.SpacetimeDb
{
	[Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
	public partial class Block : IDatabaseTable
	{
		[Newtonsoft.Json.JsonProperty("id")]
		public int Id;
		[Newtonsoft.Json.JsonProperty("is_transparent")]
		public bool IsTransparent;
		[Newtonsoft.Json.JsonProperty("top")]
		public int Top;
		[Newtonsoft.Json.JsonProperty("bottom")]
		public int Bottom;
		[Newtonsoft.Json.JsonProperty("side")]
		public int Side;

		private static Dictionary<int, Block> Id_Index = new Dictionary<int, Block>(16);

		private static void InternalOnValueInserted(object insertedValue)
		{
			var val = (Block)insertedValue;
			Id_Index[val.Id] = val;
		}

		private static void InternalOnValueDeleted(object deletedValue)
		{
			var val = (Block)deletedValue;
			Id_Index.Remove(val.Id);
		}

		public static SpacetimeDB.SATS.AlgebraicType GetAlgebraicType()
		{
			return SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
				new SpacetimeDB.SATS.ProductTypeElement("id", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.I32)),
				new SpacetimeDB.SATS.ProductTypeElement("is_transparent", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.Bool)),
				new SpacetimeDB.SATS.ProductTypeElement("top", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.I32)),
				new SpacetimeDB.SATS.ProductTypeElement("bottom", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.I32)),
				new SpacetimeDB.SATS.ProductTypeElement("side", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.I32)),
			});
		}

		public static explicit operator Block(SpacetimeDB.SATS.AlgebraicValue value)
		{
			if (value == null) return null;
			var productValue = value.AsProductValue();
			return new Block
			{
				Id = productValue.elements[0].AsI32(),
				IsTransparent = productValue.elements[1].AsBool(),
				Top = productValue.elements[2].AsI32(),
				Bottom = productValue.elements[3].AsI32(),
				Side = productValue.elements[4].AsI32(),
			};
		}

		public static System.Collections.Generic.IEnumerable<Block> Iter()
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Block"))
			{
				yield return (Block)entry.Item2;
			}
		}
		public static int Count()
		{
			return SpacetimeDBClient.clientDB.Count("Block");
		}
		public static Block FilterById(int value)
		{
			Id_Index.TryGetValue(value, out var r);
			return r;
		}

		public static System.Collections.Generic.IEnumerable<Block> FilterByIsTransparent(bool value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Block"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (bool)productValue.elements[1].AsBool();
				if (compareValue == value)
				{
					yield return (Block)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Block> FilterByTop(int value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Block"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (int)productValue.elements[2].AsI32();
				if (compareValue == value)
				{
					yield return (Block)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Block> FilterByBottom(int value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Block"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (int)productValue.elements[3].AsI32();
				if (compareValue == value)
				{
					yield return (Block)entry.Item2;
				}
			}
		}

		public static System.Collections.Generic.IEnumerable<Block> FilterBySide(int value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("Block"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (int)productValue.elements[4].AsI32();
				if (compareValue == value)
				{
					yield return (Block)entry.Item2;
				}
			}
		}

		public static bool ComparePrimaryKey(SpacetimeDB.SATS.AlgebraicType t, SpacetimeDB.SATS.AlgebraicValue _v1, SpacetimeDB.SATS.AlgebraicValue _v2)
		{
			return false;
		}

		public delegate void InsertEventHandler(Block insertedValue, StdbCraft.Scripts.SpacetimeDb.ReducerEvent dbEvent);
		public delegate void DeleteEventHandler(Block deletedValue, StdbCraft.Scripts.SpacetimeDb.ReducerEvent dbEvent);
		public delegate void RowUpdateEventHandler(Block oldValue, Block newValue, StdbCraft.Scripts.SpacetimeDb.ReducerEvent dbEvent);
		public static event InsertEventHandler OnInsert;
		public static event DeleteEventHandler OnBeforeDelete;
		public static event DeleteEventHandler OnDelete;
		public static event RowUpdateEventHandler OnRowUpdate;

		public static void OnInsertEvent(object newValue, ClientApi.Event dbEvent)
		{
			OnInsert?.Invoke((Block)newValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnBeforeDeleteEvent(object oldValue, ClientApi.Event dbEvent)
		{
			OnBeforeDelete?.Invoke((Block)oldValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnDeleteEvent(object oldValue, ClientApi.Event dbEvent)
		{
			OnDelete?.Invoke((Block)oldValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnRowUpdateEvent(object oldValue, object newValue, ClientApi.Event dbEvent)
		{
			OnRowUpdate?.Invoke((Block)oldValue,(Block)newValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}
	}
}
