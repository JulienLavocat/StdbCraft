// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System;
using SpacetimeDB;
using System.Collections.Generic;

namespace StdbCraft.Scripts.SpacetimeDb
{
	[Newtonsoft.Json.JsonObject(Newtonsoft.Json.MemberSerialization.OptIn)]
	public partial class WorldInfos : IDatabaseTable
	{
		[Newtonsoft.Json.JsonProperty("seed")]
		public int Seed;


		private static void InternalOnValueInserted(object insertedValue)
		{
			var val = (WorldInfos)insertedValue;
		}

		private static void InternalOnValueDeleted(object deletedValue)
		{
			var val = (WorldInfos)deletedValue;
		}

		public static SpacetimeDB.SATS.AlgebraicType GetAlgebraicType()
		{
			return SpacetimeDB.SATS.AlgebraicType.CreateProductType(new SpacetimeDB.SATS.ProductTypeElement[]
			{
				new SpacetimeDB.SATS.ProductTypeElement("seed", SpacetimeDB.SATS.AlgebraicType.CreatePrimitiveType(SpacetimeDB.SATS.BuiltinType.Type.I32)),
			});
		}

		public static explicit operator WorldInfos(SpacetimeDB.SATS.AlgebraicValue value)
		{
			if (value == null) return null;
			var productValue = value.AsProductValue();
			return new WorldInfos
			{
				Seed = productValue.elements[0].AsI32(),
			};
		}

		public static System.Collections.Generic.IEnumerable<WorldInfos> Iter()
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("WorldInfos"))
			{
				yield return (WorldInfos)entry.Item2;
			}
		}
		public static int Count()
		{
			return SpacetimeDBClient.clientDB.Count("WorldInfos");
		}
		public static System.Collections.Generic.IEnumerable<WorldInfos> FilterBySeed(int value)
		{
			foreach(var entry in SpacetimeDBClient.clientDB.GetEntries("WorldInfos"))
			{
				var productValue = entry.Item1.AsProductValue();
				var compareValue = (int)productValue.elements[0].AsI32();
				if (compareValue == value)
				{
					yield return (WorldInfos)entry.Item2;
				}
			}
		}

		public static bool ComparePrimaryKey(SpacetimeDB.SATS.AlgebraicType t, SpacetimeDB.SATS.AlgebraicValue _v1, SpacetimeDB.SATS.AlgebraicValue _v2)
		{
			return false;
		}

		public delegate void InsertEventHandler(WorldInfos insertedValue, StdbCraft.Scripts.SpacetimeDb.ReducerEvent dbEvent);
		public delegate void DeleteEventHandler(WorldInfos deletedValue, StdbCraft.Scripts.SpacetimeDb.ReducerEvent dbEvent);
		public delegate void RowUpdateEventHandler(WorldInfos oldValue, WorldInfos newValue, StdbCraft.Scripts.SpacetimeDb.ReducerEvent dbEvent);
		public static event InsertEventHandler OnInsert;
		public static event DeleteEventHandler OnBeforeDelete;
		public static event DeleteEventHandler OnDelete;
		public static event RowUpdateEventHandler OnRowUpdate;

		public static void OnInsertEvent(object newValue, ClientApi.Event dbEvent)
		{
			OnInsert?.Invoke((WorldInfos)newValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnBeforeDeleteEvent(object oldValue, ClientApi.Event dbEvent)
		{
			OnBeforeDelete?.Invoke((WorldInfos)oldValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnDeleteEvent(object oldValue, ClientApi.Event dbEvent)
		{
			OnDelete?.Invoke((WorldInfos)oldValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}

		public static void OnRowUpdateEvent(object oldValue, object newValue, ClientApi.Event dbEvent)
		{
			OnRowUpdate?.Invoke((WorldInfos)oldValue,(WorldInfos)newValue,(ReducerEvent)dbEvent?.FunctionCall.CallInfo);
		}
	}
}
