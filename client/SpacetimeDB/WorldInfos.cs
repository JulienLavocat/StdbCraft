// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System.Collections.Generic;
using ClientApi;
using Newtonsoft.Json;
using SpacetimeDB;
using SpacetimeDB.SATS;

namespace StdbCraft.SpacetimeDb;

[JsonObject(MemberSerialization.OptIn)]
public class WorldInfos : IDatabaseTable
{
    public delegate void DeleteEventHandler(WorldInfos deletedValue, ReducerEvent dbEvent);

    public delegate void InsertEventHandler(WorldInfos insertedValue, ReducerEvent dbEvent);

    public delegate void RowUpdateEventHandler(WorldInfos oldValue, WorldInfos newValue, ReducerEvent dbEvent);

    [JsonProperty("seed")] public int Seed;


    private static void InternalOnValueInserted(object insertedValue)
    {
        var val = (WorldInfos)insertedValue;
    }

    private static void InternalOnValueDeleted(object deletedValue)
    {
        var val = (WorldInfos)deletedValue;
    }

    public static AlgebraicType GetAlgebraicType()
    {
        return AlgebraicType.CreateProductType(new ProductTypeElement[]
        {
            new("seed", AlgebraicType.CreatePrimitiveType(BuiltinType.Type.I32))
        });
    }

    public static explicit operator WorldInfos(AlgebraicValue value)
    {
        if (value == null) return null;
        var productValue = value.AsProductValue();
        return new WorldInfos
        {
            Seed = productValue.elements[0].AsI32()
        };
    }

    public static IEnumerable<WorldInfos> Iter()
    {
        foreach (var entry in SpacetimeDBClient.clientDB.GetEntries("WorldInfos")) yield return (WorldInfos)entry.Item2;
    }

    public static int Count()
    {
        return SpacetimeDBClient.clientDB.Count("WorldInfos");
    }

    public static IEnumerable<WorldInfos> FilterBySeed(int value)
    {
        foreach (var entry in SpacetimeDBClient.clientDB.GetEntries("WorldInfos"))
        {
            var productValue = entry.Item1.AsProductValue();
            var compareValue = productValue.elements[0].AsI32();
            if (compareValue == value) yield return (WorldInfos)entry.Item2;
        }
    }

    public static bool ComparePrimaryKey(AlgebraicType t, AlgebraicValue _v1, AlgebraicValue _v2)
    {
        return false;
    }

    public static event InsertEventHandler OnInsert;
    public static event DeleteEventHandler OnBeforeDelete;
    public static event DeleteEventHandler OnDelete;
    public static event RowUpdateEventHandler OnRowUpdate;

    public static void OnInsertEvent(object newValue, Event dbEvent)
    {
        OnInsert?.Invoke((WorldInfos)newValue, (ReducerEvent)dbEvent?.FunctionCall.CallInfo);
    }

    public static void OnBeforeDeleteEvent(object oldValue, Event dbEvent)
    {
        OnBeforeDelete?.Invoke((WorldInfos)oldValue, (ReducerEvent)dbEvent?.FunctionCall.CallInfo);
    }

    public static void OnDeleteEvent(object oldValue, Event dbEvent)
    {
        OnDelete?.Invoke((WorldInfos)oldValue, (ReducerEvent)dbEvent?.FunctionCall.CallInfo);
    }

    public static void OnRowUpdateEvent(object oldValue, object newValue, Event dbEvent)
    {
        OnRowUpdate?.Invoke((WorldInfos)oldValue, (WorldInfos)newValue, (ReducerEvent)dbEvent?.FunctionCall.CallInfo);
    }
}