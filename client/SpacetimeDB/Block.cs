// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

using System.Collections.Generic;
using ClientApi;
using Newtonsoft.Json;
using SpacetimeDB;
using SpacetimeDB.SATS;

namespace StdbCraft.SpacetimeDb;

[JsonObject(MemberSerialization.OptIn)]
public class Block : IDatabaseTable
{
    public delegate void DeleteEventHandler(Block deletedValue, ReducerEvent dbEvent);

    public delegate void InsertEventHandler(Block insertedValue, ReducerEvent dbEvent);

    public delegate void RowUpdateEventHandler(Block oldValue, Block newValue, ReducerEvent dbEvent);

    public delegate void UpdateEventHandler(Block oldValue, Block newValue, ReducerEvent dbEvent);

    private static Dictionary<int, Block> Id_Index = new(16);

    [JsonProperty("bottom")] public int Bottom;

    [JsonProperty("id")] public int Id;

    [JsonProperty("is_transparent")] public bool IsTransparent;

    [JsonProperty("side")] public int Side;

    [JsonProperty("top")] public int Top;

    private static void InternalOnValueInserted(object insertedValue)
    {
        var val = (Block)insertedValue;
        Id_Index[val.Id] = val;
    }

    private static void InternalOnValueDeleted(object deletedValue)
    {
        var val = (Block)deletedValue;
        Id_Index.Remove(val.Id);
    }

    public static AlgebraicType GetAlgebraicType()
    {
        return AlgebraicType.CreateProductType(new ProductTypeElement[]
        {
            new("id", AlgebraicType.CreatePrimitiveType(BuiltinType.Type.I32)),
            new("is_transparent", AlgebraicType.CreatePrimitiveType(BuiltinType.Type.Bool)),
            new("top", AlgebraicType.CreatePrimitiveType(BuiltinType.Type.I32)),
            new("bottom", AlgebraicType.CreatePrimitiveType(BuiltinType.Type.I32)),
            new("side", AlgebraicType.CreatePrimitiveType(BuiltinType.Type.I32))
        });
    }

    public static explicit operator Block(AlgebraicValue value)
    {
        if (value == null) return null;
        var productValue = value.AsProductValue();
        return new Block
        {
            Id = productValue.elements[0].AsI32(),
            IsTransparent = productValue.elements[1].AsBool(),
            Top = productValue.elements[2].AsI32(),
            Bottom = productValue.elements[3].AsI32(),
            Side = productValue.elements[4].AsI32()
        };
    }

    public static IEnumerable<Block> Iter()
    {
        foreach (var entry in SpacetimeDBClient.clientDB.GetEntries("Block")) yield return (Block)entry.Item2;
    }

    public static int Count()
    {
        return SpacetimeDBClient.clientDB.Count("Block");
    }

    public static Block FilterById(int value)
    {
        Id_Index.TryGetValue(value, out var r);
        return r;
    }

    public static IEnumerable<Block> FilterByIsTransparent(bool value)
    {
        foreach (var entry in SpacetimeDBClient.clientDB.GetEntries("Block"))
        {
            var productValue = entry.Item1.AsProductValue();
            var compareValue = productValue.elements[1].AsBool();
            if (compareValue == value) yield return (Block)entry.Item2;
        }
    }

    public static IEnumerable<Block> FilterByTop(int value)
    {
        foreach (var entry in SpacetimeDBClient.clientDB.GetEntries("Block"))
        {
            var productValue = entry.Item1.AsProductValue();
            var compareValue = productValue.elements[2].AsI32();
            if (compareValue == value) yield return (Block)entry.Item2;
        }
    }

    public static IEnumerable<Block> FilterByBottom(int value)
    {
        foreach (var entry in SpacetimeDBClient.clientDB.GetEntries("Block"))
        {
            var productValue = entry.Item1.AsProductValue();
            var compareValue = productValue.elements[3].AsI32();
            if (compareValue == value) yield return (Block)entry.Item2;
        }
    }

    public static IEnumerable<Block> FilterBySide(int value)
    {
        foreach (var entry in SpacetimeDBClient.clientDB.GetEntries("Block"))
        {
            var productValue = entry.Item1.AsProductValue();
            var compareValue = productValue.elements[4].AsI32();
            if (compareValue == value) yield return (Block)entry.Item2;
        }
    }

    public static bool ComparePrimaryKey(AlgebraicType t, AlgebraicValue v1, AlgebraicValue v2)
    {
        var primaryColumnValue1 = v1.AsProductValue().elements[0];
        var primaryColumnValue2 = v2.AsProductValue().elements[0];
        return AlgebraicValue.Compare(t.product.elements[0].algebraicType, primaryColumnValue1, primaryColumnValue2);
    }

    public static AlgebraicValue GetPrimaryKeyValue(AlgebraicValue v)
    {
        return v.AsProductValue().elements[0];
    }

    public static AlgebraicType GetPrimaryKeyType(AlgebraicType t)
    {
        return t.product.elements[0].algebraicType;
    }

    public static event InsertEventHandler OnInsert;
    public static event UpdateEventHandler OnUpdate;
    public static event DeleteEventHandler OnBeforeDelete;
    public static event DeleteEventHandler OnDelete;
    public static event RowUpdateEventHandler OnRowUpdate;

    public static void OnInsertEvent(object newValue, Event dbEvent)
    {
        OnInsert?.Invoke((Block)newValue, (ReducerEvent)dbEvent?.FunctionCall.CallInfo);
    }

    public static void OnUpdateEvent(object oldValue, object newValue, Event dbEvent)
    {
        OnUpdate?.Invoke((Block)oldValue, (Block)newValue, (ReducerEvent)dbEvent?.FunctionCall.CallInfo);
    }

    public static void OnBeforeDeleteEvent(object oldValue, Event dbEvent)
    {
        OnBeforeDelete?.Invoke((Block)oldValue, (ReducerEvent)dbEvent?.FunctionCall.CallInfo);
    }

    public static void OnDeleteEvent(object oldValue, Event dbEvent)
    {
        OnDelete?.Invoke((Block)oldValue, (ReducerEvent)dbEvent?.FunctionCall.CallInfo);
    }

    public static void OnRowUpdateEvent(object oldValue, object newValue, Event dbEvent)
    {
        OnRowUpdate?.Invoke((Block)oldValue, (Block)newValue, (ReducerEvent)dbEvent?.FunctionCall.CallInfo);
    }
}